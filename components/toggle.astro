---
let {
  color_background = "grey",
  color_foreground = "white",
  color_checked = "green",
  color_unchecked = "red",
  checked = false,
  className,
  color = "",
} = Astro.props;

let vars = {
  color_background,
  color_foreground,
  color_unchecked,
  color_checked,
};

let props = {
  type: "checkbox",
  checked,
  color,
};
---

<label class={className}>
  <input {...props} />
  <span></span>
</label>

<style lang="scss" define:vars={vars}>
  @use "#styles/mixins" as *;

  $colors: (
    "blue": $c-blue,
    "cyan": $c-cyan,
    "purple": $c-indigo,
    "pink": $c-pink,
    "red": $c-red,
    "orange": $c-orange,
  );

  label {
    height: $height-switch;
    display: inline-block;
    width: $width-switch;
    position: relative;
  }

  label.selected-state {
    span {
      background-color: var(--color_foreground);
    }

    span:before {
      background-color: var(--color_unchecked);
    }

    input {
      @include focus {
        @include dashed-box(var(--color_foreground));
      }
    }

    input:checked + span {
      background-color: var(--color_foreground);
    }

    input:checked + span:before {
      background-color: var(--color_checked);
    }
  }

  label:not(.selected-state) {
    span {
      background-color: var(--color_background);
    }

    span:before {
      background-color: var(--color_foreground);
    }

    input:not(:checked) {
      @include focus {
        @include dashed-box(var(--color_background));
      }
    }

    input:checked {
      @include focus {
        @include dashed-box(var(--color_checked));
      }
    }

    input:checked + span {
      background-color: var(--color_checked);
    }

    @each $name, $value in $colors {
      input[color="#{$name}"] {
        &:checked {
          @include focus {
            @include dashed-box($value);
          }

          + span {
            background-color: $value;
          }
        }
      }
    }
  }

  label input {
    @include inset;

    & {
      border-radius: $border-radius-slider;
      height: $height-switch;
      width: $width-switch;
      position: absolute;
      margin: 0;
    }
  }

  span {
    @include inset;

    & {
      -webkit-transition: $transition-slider;
      border-radius: $border-radius-slider;
      transition: $transition-slider;
      position: absolute;
      cursor: pointer;
    }
  }

  span:before {
    @include size($size-slider);

    & {
      -webkit-transition: $transition-slider;
      transition: $transition-slider;
      bottom: $offset-slider;
      left: $offset-slider;
      border-radius: 50%;
      position: absolute;
      content: "";
    }
  }

  input:checked + span:before {
    -webkit-transform: translateX($size-slider);
    -ms-transform: translateX($size-slider);
    transform: translateX($size-slider);
  }
</style>
