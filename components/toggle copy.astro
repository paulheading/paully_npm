---
let {
  backgroundColorChecked = "red",
  backgroundColor = "#ccc",
  checked = false,
  color = "white",
  className,
} = Astro.props;

let vars = { backgroundColorChecked, backgroundColor, color };

let props = {
  type: "checkbox",
  checked,
};
---

<label class={className}>
  <input {...props} />
  <span></span>
</label>

<style lang="scss" define:vars={vars}>
  @use "#styles/mixins" as *;

  @mixin outline($color) {
    outline: 0.1875rem solid $color;
  }

  label {
    height: $height-switch;
    display: inline-block;
    width: $width-switch;
    position: relative;
  }

  label.selected-state {
    span {
      background-color: var(--color);
    }

    span:before {
      background-color: #2aa847;
    }

    input {
      @include focus {
        @include outline(var(--color));
      }
    }

    input:checked + span {
      background-color: var(--color);
    }

    input:checked + span:before {
      background-color: var(--backgroundColorChecked);
    }
  }

  label:not(.selected-state) {
    span {
      background-color: var(--backgroundColor);
    }

    span:before {
      background-color: var(--color);
    }

    input:not(:checked) {
      @include focus {
        @include outline(var(--backgroundColor));
      }
    }

    input:checked {
      @include focus {
        @include outline(var(--backgroundColorChecked));
      }
    }

    input:checked + span {
      background-color: var(--backgroundColorChecked);
    }
  }

  label input {
    @include inset;

    & {
      -webkit-transition: $transition-outline-color;
      transition: $transition-outline-color;
      border-radius: $border-radius-slider;
      height: $height-switch;
      width: $width-switch;
      position: absolute;
      margin: 0;
    }

    @include focus {
      outline-offset: 0.25rem;
    }
  }

  span {
    @include inset;

    & {
      -webkit-transition: $transition-slider;
      border-radius: $border-radius-slider;
      transition: $transition-slider;
      position: absolute;
      cursor: pointer;
    }
  }

  span:before {
    @include size($size-slider);

    & {
      -webkit-transition: $transition-slider;
      transition: $transition-slider;
      bottom: $offset-slider;
      left: $offset-slider;
      border-radius: 50%;
      position: absolute;
      content: "";
    }
  }

  input:checked + span:before {
    -webkit-transform: translateX($size-slider);
    -ms-transform: translateX($size-slider);
    transform: translateX($size-slider);
  }
</style>
